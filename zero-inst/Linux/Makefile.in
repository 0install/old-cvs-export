ifneq ($(KERNELRELEASE),)
	# We're building for Linux 2.5 from kconfig
	obj-m	:= lazyfs.o
else

.SUFFIXES:

KERNEL := @KERNELDIR@
KERNEL_TYPE := @KERNEL_TYPE@
prefix = @prefix@
srcdir = @srcdir@
VPATH = @srcdir@
ROOT_PREFIX = @ROOT_PREFIX@
MODULEDIR = $(ROOT_PREFIX)/lib/modules/`uname -r`/kernel/fs/lazyfs

all: lazyfs.o

CC	 := @CC@
CFLAGS   := -O2 -Wall -Wstrict-prototypes -g

UMFLAGS := -I${KERNEL}/arch/um/include -I${KERNEL}/arch/um/kernel/tt/include -I${KERNEL}/arch/um/kernel/skas/include -DARCH=um

clean:
	rm -f lazyfs.o

KERNELFLAGS := -Werror -I${KERNEL}/include -Wno-trigraphs -fno-strict-aliasing -fno-common -Wall -Wstrict-prototypes -O2 -Wall # ${UMFLAGS}
MODFLAGS := -DMODULE -D__KERNEL__

install: lazyfs.o
	mkdir -p ${MODULEDIR}
	cp lazyfs.o ${MODULEDIR}/
	[ -n "${ROOT_PREFIX}" ] || ${MAKE} real-install

real-install:
	depmod -a
	[ ! -L /uri/.lazyfs-cache ] || umount /uri
	if lsmod | grep -q '^lazyfs[ \t]'; then rmmod lazyfs; fi

uninstall:
	rm -f ${MODULEDIR}/lazyfs.o

.PHONY: module-Linux_2_4 module-Linux_2_5
lazyfs.o: lazyfs.c
	make module-${KERNEL_TYPE}

module-Linux_2_4:
	${CC} -I. -I$(srcdir) -c ${KERNELFLAGS} ${MODFLAGS} -o lazyfs.o $(srcdir)/lazyfs.c

module-Linux_2_5:
	$(MAKE) -DLINUX_2_5_SERIES -C $(KERNEL) SUBDIRS=`pwd` modules

distclean: clean

distdir dvi check installcheck:

endif
