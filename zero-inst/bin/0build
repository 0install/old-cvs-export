#!/usr/bin/env python

from xml import dom
from xml.dom import minidom
import os, sys
import stat
import md5

if len(sys.argv) != 2:
	print >>sys.stderr, "Usuage: 0build <targetdir>/<target>\n" \
		"Copy ./<target> to <targetdir>/<target>, as a 0install " \
		"accessible hierarchy."
	raise SystemExit
target = sys.argv[1]

if not target.startswith('/'):
	print >>sys.stderr, "Must give an absolute pathname"
	raise SystemExit

ZERO_NS = 'http://zero-install.sf.net'

def nl(node, more = True):
	if more:
		indent = 0
	else:
		indent = -2
	n = node
	while n.parentNode:
		indent += 2
		n = n.parentNode
	node.appendChild(node.ownerDocument.createTextNode('\n' + ' ' * indent))

class Item:
	def __init__(self, path):
		self.path = path
		info = os.lstat(path)
		self.mtime = info.st_mtime
		self.size = info.st_size
		self.leaf = os.path.basename(path)

		if stat.S_ISDIR(info.st_mode):
			self.type = 'dir'
			do_dir(path)
		elif stat.S_ISREG(info.st_mode):
			if info.st_mode & 0111:
				self.type = 'exec'
			else:
				self.type = 'file'
		elif stat.S_ISLNK(info.st_mode):
			self.type = 'link'
			self.target = os.readlink(path)
	
	def toxml(self, doc):
		node = doc.createElementNS(ZERO_NS, self.type)
		node.setAttributeNS(None, 'size', str(self.size))
		node.setAttributeNS(None, 'mtime', str(self.mtime))
		if self.type == 'link':
			node.setAttributeNS(None, 'target', self.target)
		node.appendChild(doc.createTextNode(self.leaf))
		return node

def add_files(node, files):
	doc = node.ownerDocument
	for f in files:
		nl(node)
		node.appendChild(f.toxml(doc))

def md5sum(path):
	m = md5.new()
	f = file(path)
	while 1:
		data = f.read(1000)
		if not data: break
		m.update(data)
	return m.hexdigest()

def make_group(parent, dir, files, archive):
	if not files: return

	nl(parent)
	doc = parent.ownerDocument
	group = doc.createElementNS(ZERO_NS, 'group')
	parent.appendChild(group)
	add_files(group, files)

	archive_path = os.path.join(target, dir, archive)
	os.spawnvp(os.P_WAIT, 'tar', ['tar', 'czf', archive_path,
		'-C', dir, '--'] + [f.leaf for f in files])

	info = os.lstat(archive_path)
	
	nl(group)
	child = doc.createElementNS(ZERO_NS, 'archive')
	child.appendChild(doc.createTextNode(archive))
	child.setAttributeNS(None, 'size', str(info.st_size))
	child.setAttributeNS(None, 'MD5sum', md5sum(archive_path))
	group.appendChild(child)
	nl(group, False)

def do_dir(dir):
	print "Building index file in", dir
	os.spawnvp(os.P_WAIT, 'python2.2',
		['python2.2', '/usr/lib/python2.2/compileall.py', '-l', dir])
	doc = minidom.Document()
	root = doc.createElementNS(ZERO_NS, 'directory')
	doc.appendChild(root)
	root.setAttributeNS(dom.XMLNS_NAMESPACE, 'xmlns', ZERO_NS)

	meta = []	# .DirIcon, etc
	misc = []	# Symlinks and dirs (no content)
	files = []	# Regular files and executables not in meta

	for item in os.listdir(dir):
		if item in ('CVS', '.svn'):
			continue
		if item.startswith('.0inst'):
			continue
		if item.endswith('.swp') or item.endswith('.swo'):
			continue

		i = Item(os.path.join(dir, item))
		if i.type in ('dir', 'link'):
			misc.append(i)
		elif item in ('.DirIcon', 'AppInfo.xml'):
			meta.append(i)
		else:
			assert i.type in ('file', 'exec')
			files.append(i)
	
	tdir = os.path.join(target, dir)
	if not os.path.isdir(tdir):
		os.makedirs(tdir)

	make_group(root, dir, meta, '0inst-meta.tgz')
	make_group(root, dir, files, '0inst-files.tgz')
	if misc:
		add_files(root, misc)
	
	nl(root, False)
	doc.writexml(file(os.path.join(tdir, '.0inst.xml'), 'w'))

leaf = os.path.basename(target)
target = os.path.dirname(target)
do_dir(leaf)
