<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>Documentation</h2>

<p>
The documentation is split into four parts, for the different
types of reader we have:
</p>

<dl>

<dt>User</dt>
<dd>Runs software using Zero Install.</dd>

<dt>Admin</dt>
<dd>Sets up zero install for users.</dd>

<dt>Packager</dt>
<dd>Makes software available to others via Zero Install.</dd>

<dt>Zero Install developer</dt>
<dd>Helps write the core Zero Install system.</dd>

</dl>

<p>Everyone is encouraged to subscribe to the
<a href="support.html">mailing list</a> and talk about any issues related to
Zero Install.</p>

<h2>Documentation for users</h2>

<p>
Generally, you don't have to do anything special to use the system.
When you find software on the web which is available via zero install, you'll
be told where it is, and you can run it from there. For example, you can run
the glib `Hello World' demo like this:
</p>

<pre>
$ <b>cd /uri/0install/zero-install.sourceforge.net/demo</b>
$ <b>./hello_glib</b>
Hello World from glib!
</pre>

<p>
To make it easier to find it in future, you should bookmark it somehow.
Some possibilities are:
</p>

<ul>

<li>Open a filer window and drag the program onto the pinboard or panel,
or add a filer bookmark.
</li>

<li>Add it to a Start menu or other launcher program.</li>

<li>Symlink it into your path, eg (assuming PATH contains ~/bin):
<pre>
$ <b>ln -s /uri/0install/zero-install.sourceforge.net/demo/hello_glib ~/bin</b>
$ <b>hello_glib</b>
Hello World from glib!
</pre>
</li>

<li>Make a shell alias:
<pre>
$ <b>alias hw='/uri/0install/zero-install.sourceforge.net/demo/hello_glib'</b>
$ <b>hw</b>
Hello World from glib!
</pre>
</li>

</ul>

<p>
There should never be any need to worry about libraries and supporting
programs, because they are all accessed automatically through the cache.
However, you have two further programs to help you interact with the cache:
</p>

<dl>

<dt>0show</dt>
<dd>This command displays a list of your current downloads. The display
updates automatically as the list changes. There is also a graphical GTK
version; just run
<b>/uri/0install/zero-install.sourceforge.net/apps/ZeroProgress/AppRun</b>. A
progress box will popup whenever a download is in progress.</dd>

<dt>0refresh</dt>
<dd>For speed reasons, the cache is never automatically updated. If you
know that gimp2.0 is available, but /uri/0install/www.gimp.org only has a gimp1.3
subdirectory then you can run 0refresh to update it:
<pre>
$ <b>cd /uri/0install/www.gimp.org</b>
$ <b>ls</b>
gimp1.2
gimp1.3
$ <b>0refresh</b>
$ <b>ls</b>
gimp1.2
gimp1.3
gimp2.0
</pre>

</dd>

</dl>

<h2>Documentation for admins</h2>

<p>Setting up a computer so that it can use Zero Install is covered in
detail in the <a href="install.html">Install Guide</a>.</p>

<p>You may also be interested in the <a href="security.html">security model</a>
essay.</p>

<h2>Documentation for packagers</h2>

<p>If you'd like to make software available via Zero Install then you should
use the 0build program to build the index file. The easiest way to do this
is to 'cd' into the directory you want to make available and run '0build'
to build the index files in the server directory from there:</p>

<pre>
$ <b>alias 0build=/uri/0install/zero-install.sourceforge.net/bin/0build</b>
$ <b>cd ~/www</b>
$ <b>ls -l MyProg/</b>
total 4
-rwxr-xr-x    1 tal00r   tal00r         18 2003-05-23 15:21 foo
$ <b>./MyProg/foo</b>
42
$ <b>0build /var/www myhost.com</b>
Building index files for server 'myhost.com' in '/var/www'.
Creating new directory for archives '/var/www/.0inst-archives'
Skipping .0inst-0build
Creating new archive for /MyProg
$ <b>/uri/0install/myhost.com/MyProg/foo</b>
42
</pre>

<p>And that's it!</p>

<h3>Suggested directory layout</h3>

<p>
Typically, you'll want to provide multiple versions of your software, and
for multiple platforms. The suggested way to handle this is to create
a subdirectory for each platform, and then a sub-sub-directory for each
version, so the program will be run as:
</p>

<pre>
$ <b>/uri/0install/.../MyProg/Linux-ix86/1.0.2/MyProg</b>
</pre>

<p>
If your program is platform independent then you can skip the platform part,
of course. If your program is platform dependant, but programs referring to
it are not, then you should use the special '@PLATFORM@' target:
</p>

<pre>
$ <b>cd ~/www/MyProg</b>
$ <b>ln -s '@PLATFORM@' platform</b>
</pre>

<p>
Other programs can then access it as:
</p>

<pre>
$ <b>/uri/0install/.../MyProg/platform/1.0.2/MyProg</b>
</pre>

<p>
When accessed via Zero Install, the symlink's target will be the name of
the user's platform (ie, it will appear as 'platform -> Linux-ix86' on
Linux ix86 type systems).
</p>

<p>
You should also use symlinks to indicate interesting versions (such as the
current stable release). Thus, a python script might start with:
</p>

<pre>
#!/uri/0install/www.python.org/platform/2.2-or-later
print "Hello, I need Python 2.2 or later"
</pre>

<p>
The '2.2-or-later' symlink points to the latest version of python which
is compatible with version 2.2. Other examples: 'latest-2.2 -> 2.2.3',
'latest-stable', etc.
</p>

<p>
The versions should go inside the platform directories (rather than the
other way around) so that 'platform/latest-2.2' can be a different version
for each platform (eg, if the ARM port is a few versions behind the x86 one).
</p>

<h3>Depending on other things in Zero Install</h3>

<p>
Your application can use other libraries from Zero Install, or it can use
old-style pathnames (eg, '#!usr/bin/env python'). In that case, the user
must install Python manually, as if they weren't using Zero Install. This
is useful for packages that aren't provided through this system.
</p>

<p>
If the software you're packaging has not been designed for Zero Install then
it may require a 'make install' step. In that case, use --prefix to give
the final location (full URI) and mount a tmpfs partition (or similar) there
to catch the installed files:
</p>

<pre>
$ <b>./configure --prefix=/uri/0install/www.gtk.org/glib/Linux-ix86/2.2.1</b>
$ <b>make</b>
# <b>mount -t tmpfs tmpfs /uri/0install/www.gtk.org/</b>
$ <b>make install</b>
</pre>

<p>
Then use 0build to archive the tmpfs partition onto the web server.
</p>

<h3>Shared libraries</h3>

<p>
It's quite easy to make normal libraries available through Zero Install
(see the <a href="technical.html">glib example</a>). For a very simple example,
take a look in
<tt>/uri/0install/zero-install.sourceforge.net/libs/libhello-1.0</tt>. There's
an 'example' subdirectory with a test program. Copy that directory somewhere
and run make inside it. The program compiles using the header files for
`libhello' from Zero Install. You'll get a binary called 'demo' which, when
run, dynamically links against the binary in Zero Install too.
</p>

<h2>Documentation for Zero Install developers</h2>

See the <a href="technical.html">Technical details</a> page for more
information.

</html>
