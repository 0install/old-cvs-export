<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>Installation</h2>

<p>
Although the system makes installing other software very easy, the Zero
Install system itself still requires some work to install.
</p>

<div class='note'>
Please do not install this software on important machines. It is still
very much under development and has not yet been well tested.</div>

<p>
That said, I'm running it on my machine without any problems so far. Please
let me know how you get on, and any problems you find. You could also install
it under <a href="http://user-mode-linux.sf.net">User Mode Linux</a> if you
want to test it in safety.
</p>

<p>The Zero Install system requires a small Linux kernel module to provide
the /uri/0install directory. Like all kernel modules, you <strong>must</strong>
compile this using the actual kernel headers for the kernel you're actually
running. The easiest way to ensure this is to have compiled your own kernel
(eg, from <a href="http://kernel.org">kernel.org</a>) and be running it.
</p>

<p>
Only Linux 2.4 series kernels are currently supported, not the 2.5 series. If
you want to port the (small) module to other kernels (BSD, MacOS X, etc) please
get in touch.
</p>

<p>
There are plenty of guides on the net if you don't feel confident about
compiling your own kernel. For example,
<a href="http://www.osnews.com/story.php?news_id=2949">The Very Verbose Guide
to Updating and Compiling Your Debian Kernel</a> (which isn't very Debian
specific, despite the name) and
<a href="http://www.osnews.com/story.php?news_id=443">Compiling the Linux
Kernel</a>.
</p>

<div class='note'>
<p>
Joachim Kupke has created
<a href="http://www-i1.informatik.rwth-aachen.de/~joachimk/debian/">Debian
packages</a> for Zero Install.
</p>
<!--
Add<br/><tt>deb http://www-i1.informatik.rwth-aachen.de/~joachimk debian/</tt>
<br/>to<br/><tt>/etc/apt/sources.list</tt><br/>and install using apt-get.
-->
<p>
However, version 0.1.11 is rather old and buggy, so I suggest installing from
the source tarballs below instead.
</p>
</div>
<!--
<div class='note'>
<strong>RedHat 9 users</strong> who are using the stock RedHat kernel can
<a href="http://prdownloads.sourceforge.net/zero-install/zero-install-rh9-0.1.7.tgz?download">download the RedHat 9 binary version</a>, then skip the
'configure' and 'make' steps below, continuing from the install step.
</div>
-->

<p>OK, now <a href="http://prdownloads.sourceforge.net/zero-install/zero-install-0.1.13.tar.gz">download Zero Install</a> [ <a href="http://prdownloads.sourceforge.net/zero-install/zero-install-0.1.13.tar.gz.sig">GPG Sig</a> ]. Extract it, and
move to the new directory (things you type are shown in bold):
</p>

<pre>
$ <b>tar xzf zero-install-0.1.13.tar.gz</b>
$ <b>cd zero-install-0.1.13</b>
</pre>

<p>
The system has two parts: a kernel module, which handles all cached requests
itself, and a 'helper' application to fetch uncached stuff from the Internet.
For security reasons, it's better not to run the helper as root. So you'll
now need to choose a user to run the helper as. This could be your own user
name, or (ideally) you could create a new user just for this purpose. Run
configure with the name of your chosen user (here called 'zeroinst'):
</p>

<pre>
$ <b>./configure --with-user=zeroinst</b>
</pre>

<p>
If it doesn't work, it may tell you that it can't find the kernel headers.
You can use --with-kernel to tell it where they are, for example:
</p>

<pre>
$ <b>./configure --with-user=zeroinst --with-kernel=/home/fred/linux-2.4.20</b>
</pre>

<div class='note'>
If you want to test the system under <a
href="http://user-mode-linux.sf.net">User Mode Linux</a>, you'll need to use
the above command to tell it where the UML kernel sources are. After the
configure step, add <tt>${UMFLAGS}</tt> to the end of <tt>KERNELFLAGS</tt>
in the makefile.
</div>

<p>
Then run make to compile it:
</p>
<pre>
$ <b>make</b>
</pre>

<!--
<div class='note'>People installing a binary version rejoin us here...</div>
-->

<p>
Now install it (use su to get the root prompt, #):
</p>

<pre>
$ <b>su</b>
# <b>make install</b>
</pre>

<p>
This will copy the new lazyfs module under /lib/modules/, and create the
/uri/0install mount point and the /var/cache/zero-inst cache directory. It will
also add an entry to /etc/fstab to allow mounting /uri/0install easily. If you
were already running an older version, this step also unmounts /uri/0install
and unloads the old module.
</p>

<p>
Now mount /uri/0install. Since the helper is not yet running, you won't be able
to access the directory yet. Don't worry about that. Then 'exit' from the 'su',
as we don't need to be root anymore.
</p>

<pre>
# <b>mount /uri/0install</b>
# <b>exit</b>
</pre>

<p>
Now, run the helper application (it will just wait, without doing anything).
You need to run the helper as the user you specified at the start.
</p>

<pre>
$ <b>./zero-install</b>
Zero Install started: using cache directory '/var/cache/zero-inst'
</pre>

<p>
The helper will print information about what it's doing when it's used.
</p>

<h2>Testing the installation</h2>

<p>
With /uri mounted and the helper running, open another window, and try
the following command:
</p>

<pre>
$ <b>cat /uri/0install/zero-install.sourceforge.net/demo/test.txt</b>
It worked!
</pre>

<p>
Users can run the 0show command to see what they are currently downloading.
This is just a command-line client, but there is also a
graphical version called ZeroProgress, itself available via Zero Install:
</p>

<pre>
$ <b>/uri/0install/zero-install.sourceforge.net/apps/ZeroProgress/AppRun</b>
</pre>

<p>
Nothing appears on the screen when you run this, but any futher downloads
will display a progress box. Note that the GTK library is not yet in
Zero Install, so you need to have that installed by traditional methods.
</p>

<p>
You can find some other programs to play with in the demo directory. Notice
that running 'hello_glib' will automatically pull in the GLIB library. Running
the command a second time will be just as fast as running an application
installed normally.
</p>

<pre>
$ <b>cd /uri/0install/zero-install.sourceforge.net/demo</b>
$ <b>./hello_glib</b>
Hello World from glib!
</pre>

<p>
You can open the <a href="http://rox.sf.net/rox_filer.php3">ROX-Filer</a>
window shown on the main page using this command:
</p>

<pre>
$ <b>rox /uri/0install/zero-install.sourceforge.net/demo</b>
</pre>

<p>
You can also find XFree86 4.3.1 in the `libs' directory. You can run either
the client applications (eg, xterm) with your current X server, or run the
X server itself (or both). Note that you may have to stare at a blank screen for
a while as the libraries are pulled in.
</p>
<pre>
$ <b>cd /uri/0install/zero-install.sourceforge.net/libs/XFree86/4.3.1/Linux-i386/bin</b>
$ <b>./XFree86 -version</b>
XFree86 Version 4.3.0
Release Date: 27 February 2003
# <b>./XFree86 :1</b>
</pre>

<p>
Lots more software, including Mozilla, Python, Acrobat reader, pkg-config,
GTK, Java and NEdit, can be found in the directory
<tt>/uri/0install/www-i1.informatik.rwth-aachen.de</tt>. Some ROX applications
can be found in <tt>/uri/0install/rox.sourceforge.net/</tt>.
</p>

<h2>Further reading</h2>

<p>Please see <a href="docs.html">the documentation</a> for more information.</p>

</html>
