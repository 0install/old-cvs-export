<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>Installation</h2>

<p>
Although the system makes installing other software very easy, the Zero
Install system itself still requires some work to install.
</p>

<div class='note'>
Please do not install this software on important machines. It is still
very much under developement and has not yet been well tested.</div>

<p>
That said, I'm running it on my machine without any problems so far. Please
let me know how you get on, and any problems you find. You could also install
it under <a href="http://user-mode-linux.sf.net">User Mode Linux</a> if you
want to test it in safely.
</p>

<p>The Zero Install system requires a small Linux kernel module to provide
the /uri directory. Like all kernel modules, you <strong>must</strong>
compile this using the actual kernel headers for the kernel you're actually
running. In practice, this means that you should have compiled your own
kernel (eg, from <a href="http://kernel.org">kernel.org</a>) and be running
it. Using a stock distribution kernel is a bad idea (two reports of problems
with stock Debian kernels, though LuFS seems to be affected the same way, so
perhaps it's Debian's fault?). You may get a kernel crash, and will probably
have to reboot (this affects all kernel modules, not just the zero-install
one).
</p>

<p>
Only Linux 2.4.x series kernels are currently supported. If you want to port
the (small) module to other kernels (BSD, MacOS X, etc) please get in touch.
</p>

<p>
There are plenty of guides on the net if you don't feel confident about
compiling your own kernel. For example,
<a href="http://www.osnews.com/story.php?news_id=2949">The Very Verbose Guide
to Updating and Compiling Your Debian Kernel</a> (which isn't very Debian
specific, despite the name) and
<a href="http://www.osnews.com/story.php?news_id=443">Compiling the Linux
Kernel</a>.
</p>

<div class='note'>
<strong>RedHat 9 users</strong> who are using the stock RedHat kernel can
<a href="http://prdownloads.sourceforge.net/zero-install/zero-install-rh9-0.1.7.tgz?download">download the RedHat 9 binary version</a>, then skip the
'configure' and 'make' steps below, continuing from the install step.
</div>

<p>OK, now <a href="http://prdownloads.sourceforge.net/zero-install/zero-inst-0.1.8.tgz">download Zero Install</a> [ <a href="http://prdownloads.sourceforge.net/zero-install/zero-inst-0.1.8.tgz.sig">GPG Sig</a> ]. Extract it, and run
configure (things you type are shown in bold):</p>

<pre>
$ <b>tar xzf zero-inst-0.1.8.tgz</b>
$ <b>cd zero-inst-0.1.8</b>
$ <b>./configure</b>
creating cache ./config.cache
checking for gcc... gcc
checking whether the C compiler (gcc  ) works... yes
checking whether the C compiler (gcc  ) is a cross-compiler... no
checking whether we are using GNU C... yes
checking whether gcc accepts -g... yes
checking for directory with kernel source... /lib/modules/2.4.20/build
checking for kernel headers... OK
checking for platform type... Linux-ix86
updating cache ./config.cache
creating ./config.status
creating Makefile
creating config.h
</pre>

<p>
If it doesn't work, it may tell you that it can't find the kernel headers.
You can use --with-kernel to tell it where they are, for example:
</p>

<pre>
$ <b>./configure --with-kernel=/home/fred/linux-2.4.20</b>
</pre>

<div class='note'>
If you want to test the system under <a
href="http://user-mode-linux.sf.net">User Mode Linux</a>, you'll need to use
the above command to tell it where the UML kernel sources are. After the
configure step, add <tt>${UMFLAGS}</tt> to the end of <tt>KERNELFLAGS</tt>
in the makefile.
</div>

<p>
Then run make to compile it:
</p>
<pre>
$ <b>make</b>
gcc -c -I/lib/modules/2.4.20/build/include -Wno-trigraphs -fno-strict-aliasing
  -fno-common -Wall -Wstrict-prototypes -O2 -Wall  -DMODULE -D__KERNEL__
  -o lazyfs.o lazyfs.c
gcc -O2 -Wall -Wstrict-prototypes -g   -c -o zero-install.o zero-install.c
gcc -O2 -Wall -Wstrict-prototypes -g   -c -o support.o support.c
gcc -O2 -Wall -Wstrict-prototypes -g   -c -o fetch.o fetch.c
gcc -O2 -Wall -Wstrict-prototypes -g   -c -o control.o control.c
gcc -o zero-install zero-install.o support.o fetch.o control.o -lexpat
gcc -O2 -Wall -Wstrict-prototypes -g    0show.c   -o 0show
</pre>

<div class='note'>People installing a binary version rejoin us here...</div>
<p>
Now install it (use su to get the root prompt, #):
</p>

<pre>
$ <b>su</b>
# <b>make install</b>
mkdir -p /lib/modules/`uname -r`/kernel/fs/lazyfs
cp lazyfs.o /lib/modules/`uname -r`/kernel/fs/lazyfs/
depmod -a
[ -d /uri ] || mkdir /uri
[ -d /var/cache/zero-inst ] || mkdir /var/cache/zero-inst
</pre>

<p>
This will copy the new lazyfs module under /lib/modules/, and create the /uri
mount point and the /var/cache/zero-inst cache directory.
</p>

<p>
If you're upgrading from a previous version, you'll need to unload
the old lazyfs module at this point:
</p>
<pre>
# <b>umount /uri</b>
# <b>rmmod lazyfs</b>
</pre>

<p>
The kernel module can handle all cached requests itself, but when the user
tries to access something that isn't cached, it uses a 'helper' application to
fetch it. For security reasons, it's better not to run the helper as root.
</p>
<p>
Change the ownership of the cache directory to the user the helper will run as
(either your own user, or create a new user specially for the purpose using
'adduser --system'). Run the commands below, replacing 'fred' with the login
name chosen, then mount /uri (the order is important). Since the helper is not
yet running, you won't be able to access the directory yet. Don't worry about
that.
</p>

<pre>
# <b>chown fred /var/cache/zero-inst</b>
# <b>mount lazyfs -t lazyfs /uri -o /var/cache/zero-inst</b>
</pre>

<p>
We don't need to be root anymore, so 'exit' from the 'su'. Now, run the
helper application (it will just wait, without doing anything):
</p>

<pre>
# <b>exit</b>
$ <b>./zero-install</b>
Zero Install started: using cache directory '/var/cache/zero-inst'
</pre>

<p>
The helper will print information about what it's doing when it's used.
Open another window, and try it out with the following command:
</p>

<pre>
$ <b>cat /uri/http/zero-install.sourceforge.net/demo/test.txt</b>
It worked!
</pre>

<p>
Users can run the 0show command to see what they are currently downloading.
This is just a command-line client at the moment, but the idea is to create
a panel applet or similar to keep the user informed.
</p>

<p>
You can find some other programs to play with in the demo directory. Notice
that running 'hello_glib' will automatically pull in the GLIB library. Running
the command a second time will be just as fast as running an application
installed normally.
</p>

<pre>
$ <b>cd /uri/http/zero-install.sourceforge.net/demo</b>
$ <b>./hello_glib</b>
Hello World from glib!
</pre>

<p>
You can open the <a href="http://rox.sf.net/rox_filer.php3">ROX-Filer</a>
window shown on the main page using this command:
</p>

<pre>
$ <b>rox /uri/http/zero-install.sourceforge.net/demo</b>
</pre>

<p>
You can also find XFree86 4.3.1 in the `libs' directory. You can run either
the client applications (eg, xterm) with your current X server, or run the
X server itself (or both). Note that you may have to stare at a blank screen for
a while as the libraries are pulled in.
</p>
<pre>
$ <b>cd /uri/http/zero-install.sourceforge.net/libs/XFree86/4.3.1/Linux-i386/bin</b>
$ <b>./XFree86 -version</b>
XFree86 Version 4.3.0
Release Date: 27 February 2003
# <b>./XFree86 :1</b>
</pre>

<p>
If you want /uri to be mounted automatically at boot-time, add this line
to the end of your /etc/fstab file:
</p>

<pre>
lazyfs  /uri  lazyfs  /var/cache/zero-inst  0 0
</pre>

<p>
You will then be able to use anything that's already cached. You still have
to start the helper application before you can fetch new stuff.
</p>

</html>
