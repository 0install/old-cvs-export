<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>The Injector: Packaging Guide</h2>

<p>
This guide shows how to make software available through <a href="injector.html">the injector</a>.
Our example package will be <a href="http://www.hayber.us/rox/Find">Find</a>, a little
utility for searching for files.
</p>

<h2>Interfaces and Implementations</h2>

<dl>
<dt>An interface</dt>
<dd>describes what something does (eg, "A Find in Files Utility").</dd>

<dt>An implementation</dt>
<dd>is something that does it (eg, "Find version 4" or "Find version 5").</dd>
</dl>

<p>
In Zero Install, interfaces are named by globally unique URLs (like web pages). Some examples
of interfaces are:
</p>

<ul>
<li><a href="http://rox.sourceforge.net/2005/interfaces/Edit">http://rox.sourceforge.net/2005/interfaces/Edit</a></li>
<li><a href="http://rox.sourceforge.net/2005/interfaces/ROX-Lib">http://rox.sourceforge.net/2005/interfaces/ROX-Lib</a></li>
</ul>

<p>
Each <i>implementation</i> of an interface is identified by a cryptographic digest, eg:
</p>
<ul>
<li><b>sha1=235cb9dd77ef78ef2a79abe98f1fcc404bba4889</b></li>
<li><b>sha1=c86d09f1113041f5eaaa8c3d1416fcf4dad8e2e0</b></li>
</ul>

<div class="note">TODO: Some weaknesses in the SHA1 algorithm have recently been
discovered. At present, it is still strong enough for our use, but we should migrate
to another algorithm at some point.</div>

<p>
When we run a program (like Find) we need to choose an implementation of Find, and
also an implementation of every interface on which it depends. Then, we need to
tell the program where to find them all; this process is known as <i>Dependency
Injection</i> (or <i>Inversion of Control</i>).</p>

<p>
Both tasks are handled by the injector. This takes as input an interface and
selects a set of implementations based on the user's policy.
</p>

<p>
The list of implementations of an interface is found by using the interface's name as a
URL and downloading the XML file it names (click on one of the interfaces above to see
what an interface file looks like).
</p>

<h2>Creating the interface file</h2>

<p>
We will need to pick a URL for Find. Since we must upload the interface file to this URL, we must pick
a name we control. It is best to choose names that are unlikely to change, since other software that uses
ours will identify it by the URL we pick. For this example, we will use <b>http://0install.net/tutorial/Find</b>.
This is the URL that will be used to download the interface file, so pick a URL that doesn't already exist!
</p>

<p>
Start by creating an XML file (<b>Find.xml</b>) describing your application.
Copy the template below and adjust as appropriate:
</p>

<pre><![CDATA[
<?xml version="1.0" ?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface"
           uri="http://0install.net/tutorial/Find"
	   main="Find/AppRun">
  <name>Find</name>
  <summary>a find-in-files utility</summary>
  <description>
Searches files for specific text, displaying the results in a window. Double click
on the result line(s) to open the file at that point.

Configuration options are available to customize the search command and the editor with which to
open the files.
  </description>
</interface>
]]></pre>

<p>
The attributes on the root element are:
</p>

<dl>
<dt>uri</dt> <dd>the correct name for the interface (since there may be several URLs which will fetch this
interface; this is to ensure everyone uses the canonical name)</dd>
<dt>xmlns</dt> <dd>the XML namespace for all the elements (don't change this)</dd>
<dt>main</dt> <dd>(optional) an executable file inside each implementation which is used as the default
action when the user asks to run the interface</dd>
</dl>

<p>The first three elements describe the interface in varying levels of detail:</p>

<dl>
<dt>&lt;name&gt;</dt> <dd>a short name to identify the interface</dd>
<dt>&lt;summary&gt;</dt> <dd>a short one-line description (note that the first word should
not be upper-case unless it is a proper noun)</dd>
<dt>&lt;description&gt;</dt> <dd>a full description, which can be several paragraphs long</dd>
</dl>

<h2>Signing the interface</h2>

<p>
All interface files must be signed, or the injector will reject them. If you do not already have a GPG
key, create one now. You can accept the defaults for most fields; just enter your name and email address:
</p>

<pre>
$ <b>gpg --gen-key</b>
</pre>

<p>
The gpg signature is added to the XML like this:
</p>

<pre>
$ <b>gpg --clearsign Find.xml</b>
</pre>

<h2>Importing the interface</h2>

<p>
We could upload our interface to a web-server now and fetch it from there. However, for testing we can ask the
injector to import the local signed file, like this:
</p>

<pre>
$ <b>0launch --import Find.xml.asc</b>
Interface: http://0install.net/tutorial/Find
The interface is correctly signed with the following keys:
- Valid signature from 1E203D0FFF20A3B0FA1A0C2A989BA725182BDABD
Do you want to trust all of these keys to sign interfaces?
Trust all [Y/N] <b>Y</b>
Trusting 1E203D0FFF20A3B0FA1A0C2A989BA725182BDABD
</pre>

<p>
The injector will ask you to confirm that you trust the key to sign interfaces. The fingerprint shown will vary,
since it identifies your key.
</p>

<p>
We can now try running Find:
</p>

<pre>
$ <b>0launch http://0install.net/tutorial/Find</b>
Can't find all required implementations:
- &lt;Interface http://0install.net/tutorial/Find&gt; -&gt; None
</pre>

<p>
However, it won't actually run, as we haven't told it about any implementations (versions) yet!
</p>

<h2>Implementations</h2>

<p>
An implementation (in the Zero Install sense) is always some particular
version, identified by a cryptographic hash of its contents (typically the
SHA1 digest of its manifest). Therefore, two releases with the same version
number are still considered as separate implementations if they differ in any
way.
</p>

<p>
We will add Find version 5 to our interface file. Download the archive and extract it:
</p>

<pre>
$ <b>wget http://www.hayber.us/rox/find/Find-005.tgz</b>
$ <b>mkdir download</b>
$ <b>tar xzf Find-005.tgz -C download</b>
</pre>

<p>
When adding a new implementation, we need to know the SHA1 digest value to use.
Once the injector has downloaded a program, it will check that the digest is
correct to ensure that the archive hasn't been tampered with. To find the SHA1 hash:
</p>

<pre>
$ <b>python /usr/lib/python2.3/site-packages/zeroinstall/zerostore/manifest.py download</b>
[...]
sha1=fcab409db9f527687c71c954b9b64d27bced57fc
</pre>

<div class="note">TODO: There should be an easier way to do this in the next version!</div>

<p>
This command prints out a manifest which shows the whole directory structure along with the
SHA1 of each file inside it. On the last line, it prints the SHA1 of the manifest file itself;
this is the value we need.
</p>

<p>
Note that the digest is for the extracted directory structure; <i>not</i> for
the compressed archive. Also note that we get the digest for the
<b>download</b> directory itself rather than for the <b>Find</b> directory
inside it. This is because tar archives can contain multiple top-level items.
</p>

<p>
We will now add an &lt;implementation&gt; element to our <b>Find.xml</b> file, quoting the SHA1 of
the manifest in the <b>id</b> attribute.
</p>

<pre>
&lt;interface ...&gt;
  [...]
  <b>&lt;implementation id="sha1=fcab409db9f527687c71c954b9b64d27bced57fc"
		stability="testing" version="5"&gt;
    &lt;archive href="http://www.hayber.us/rox/find/Find-005.tgz" size="29721"/&gt;
  &lt;/implementation&gt;</b>
&lt;/interface&gt;
</pre>

<p>
Inside the &lt;implementation&gt;, we have also added an &lt;archive&gt; element. This tells the injector
that the implementation can be downloaded from this location. We give the size of the archive so that the
injector can display a progress bar.
</p>

<p>
You can now re-sign the file, reimport and try again:
</p>

<pre>
$ <b>gpg --clearsign Find.xml</b>
$ <b>0launch --import Find.xml.asc</b>
$ <b>0launch http://0install.net/tutorial/Find</b>
</pre>

<p style='text-align: center'>
<img width="507" height="278" src="launch-find.png" alt='Launching Find' />
</p>

<p>
Find now downloads and runs (possibly complaining about a missing ROX-Lib; see below).
</p>

<h3>Archives containing versioned directories</h3>

<p>
For Find, we were lucky because the archive contained a directory simply called
'Find'. Often, archives contain a top-level directory with the version number
(eg, 'Find-005/Find').  The optional <b>extract</b> attribute solves this
problem, by telling the injector to extract a particular subdirectory of an
archive. So, if find had been distributed this way, we would have used this instead:
</p>

<pre>
&lt;archive href="http://www.hayber.us/rox/find/Find-005.tgz" <b>extract='find-005'</b> size="29721"/&gt;
</pre>

<p>
We would then calculate the manifest of the <b>find-005</b> directory instead of the <b>download</b> directory.
</p>

<h2>Dependencies</h2>

<p>
Find requires ROX-Lib, so you still can't actually run it yet (unless you have ROX-Lib
installed locally). Now we will get the injector to select an implementation of ROX-Lib
to use with Find.
</p>

<p>
To avoid specifying the dependency again for each implementation, we will create a
&lt;group&gt; element and put the dependency and the implementations inside it. All
implementations in the group will have ROX-Lib as a dependency:
</p>

<pre><![CDATA[
  <group>]]><b><![CDATA[
    <requires interface="http://rox.sourceforge.net/2005/interfaces/ROX-Lib">
      <environment insert="ROX-Lib2/python" name="PYTHONPATH"/>
    </requires>]]></b><![CDATA[
    <implementation id="sha1=fcab409db9f527687c71c954b9b64d27bced57fc"
		  stability="testing" version="5">
      <archive href="http://www.hayber.us/rox/find/Find-005.tgz" size="29721"/>
    </implementation>
  </group>
]]></pre>

<p>
The &lt;requires&gt; element names an interface which is required by all the implementations
in this group. 
The &lt;environment&gt; element inside tells the injector how to make its
choice known to Find. In this case, it is by inserting
<b>/path/of/cache/sha1=XXX/python</b> to the beginning of <b>PYTHONPATH</b>.
When Find (a Python program) does <b>import rox</b>, it will then get the chosen
version.
</p>

<p>
Re-sign and re-import the interface and try again:
</p>

<pre>
$ <b>gpg --clearsign Find.xml</b>
$ <b>0launch --import Find.xml.asc</b>
$ <b>0launch -g http://0install.net/tutorial/Find</b>
</pre>

<p>
Find should now run correctly.
</p>

<h2>Uploading the interface</h2>

<p>
So far, we have been importing the interface from a local file. To make it available to others,
we simply upload the signed interface to a web-server, so that it can be downloaded by fetching
<a href="http://0install.net/tutorial/Find">http://0install.net/tutorial/Find</a>.
</p>

<p>
The easiest way to test it is to set HOME to a new directory and try running it:
</p>

<pre>
$ <b>mkdir /tmp/test</b>
$ <b>HOME=/tmp/test 0launch http://0install.net/tutorial/Find</b>
Failed to download key from 'http://0install.net/tutorial/989BA725182BDABD.gpg':
HTTP Error 404: Not Found
</pre>

<p>
We need to put up our GPG public key up too! Export it and upload it (the name is
the key ID):
</p>

<pre>
$ <b>gpg --list-secret-keys  --keyid-format long</b>
pub   1024D/<b>989BA725182BDABD</b> 2005-06-05 [expires: 2006-06-05]
uid                          Injector test key (testing only)
sub   2048g/F14D7B28771AED10 2005-06-05 [expires: 2006-06-05]
$ <b>gpg --export -a <i>myname</i> > 989BA725182BDABD.gpg</b>
</pre>

<p>
Once the key is uploaded, the test should work. Other people can now use your interface.
</p>

<p>
<strong>Excercise:</strong> add another version of Find to the interface.
</p>

<h2>Versions</h2>

<p>
A version is a dot-separated list of integers. Eg "1.2.3". It can be just a
single number ("1") or a sequence of any number of components ("1.4.2.3").
Versions are ordered like this:
</p>

<ul>
<li>0.1</li>
<li>1</li>
<li>1.1</li>
<li>1.2</li>
<li>1.2.1</li>
<li>1.2.1.4</li>
<li>1.2.2</li>
<li>1.2.10</li>
<li>3</li>
</ul>

<p>
The injector doesn't care about anything other than the sort order (ie, whether
one version comes before or after another). It is assumed that an
implementation can be safely replaced by one with a later version number, but
not with an earlier one. So, if you ask for "1.2.1" then you might get "1.2.2"
or "1.3" or even "5.7", but not "1.2.0". This is a little different to some
other systems, where numbers in different places have different meanings.
</p>

<p>
Incompatible changes (where a newer version cannot be used in place of an older
version) to an interface should be handled by creating a new interface. Eg:
</p>

<ul>
<li>http://gtk.org/2005/interfaces/GTK-1.2 (contains 1.2.0, 1.2.1, 1.2.2, ...)</li>
<li>http://gtk.org/2005/interfaces/GTK-2.0 (contains 2.0.0, 2.0.1, 2.2.0, 2.4.0, 2.4.1, ...)</li>
</ul>


<h2>Stability</h2>

<p>
The interface file also gives a stability rating for each implementation. The following
levels are allowed:
</p>

<ul>
<li>Stable</li>
<li>Testing</li>
<li>Developer</li>
<li>Buggy</li>
<li>Insecure</li>
</ul>

<p>
Stability ratings are kept independently of the implementations, and are expected to change over
time. When any new release is made, its stability should be set to <b>Testing</b>. Users who
have selected <b>Help test new versions</b> will then start using it. Other users will continue
with the previous stable release. After a while (days, weeks or months, depending on the project)
with no serious problems found, the implementation's stability can be changed to <b>Stable</b>
so that everyone will use it.
</p>

<p>
If problems are found, it can instead be marked as <b>Buggy</b>, or <b>Insecure</b>. The injector
won't select either by default, but it is useful to users to see the reason (users may opt to
continue using a buggy version if it seems to work for them, but they should never use an insecure
one). <b>Developer</b> is like a more extreme version of <b>Testing</b>, where the program is
expected to have bugs.
</p>

<h2>Adding an icon</h2>

<p>
You can also specify an icon in the interface file. This is used by programs such as
<a href="http://rox.sourceforge.net/phpwiki/index.php/AddApp">AddApp</a>. Simply
add an &lt;icon&gt; element to the interface file:
</p>

<pre>
  &lt;icon type='image/png' href='http://0install.net/tutorial/Find.png'/&gt;
</pre>

</html>
