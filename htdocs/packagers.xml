<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>Documentation for packagers</h2>

<p>
Packagers make software available to others through Zero Install.
To do this, you will need to be able to upload files to publically-accessible
web server (eg, apache). The web server doesn't need to do anything special
(there's no dynamic content, CGI scripts or anything like that); it just needs
to serve the files you upload.
</p>

<ul>
<li><a href="http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/361">I share my webserver with others, and can't put files in the root!</a></li>
</ul>

<h3>Tutorial</h3>

<p>If you'd like to make software available via Zero Install then you should
use the 0build program to build the index file. The easiest way to do this
is to 'cd' into the directory you want to make available and run '0build'
to build the index files in the server directory from there:</p>

<pre>
$ <b>alias 0build=/uri/0install/zero-install.sourceforge.net/bin/0build</b>
$ <b>cd ~/www</b>
$ <b>ls -l MyProg/</b>
total 4
-rwxr-xr-x    1 tal00r   tal00r         18 2003-05-23 15:21 foo
$ <b>./MyProg/foo</b>
42
$ <b>0build /var/www myhost.com</b>
Building index files for server 'myhost.com' in '/var/www'.
Creating new directory for archives '/var/www/.0inst-archives'
Creating new archive for /MyProg
$ <b>/uri/0install/myhost.com/MyProg/foo</b>
42
</pre>

<p>And that's it!</p>

<p>
Note that <a href="http://freshmeat.net/articles/view/1049/">Zero Install and
the Web of Software</a> also has a longer tutorial on providing software via
Zero Install, and there's an even more detailed guide in
<a href="#study1">Case Study #1</a> below.
</p>

<h3>Suggested directory layout</h3>

<p>
Typically, you'll want to provide multiple versions of your software, and
for multiple platforms. The suggested way to handle this is to create
a subdirectory for each platform, and then a sub-sub-directory for each
version, so the program will be run as:
</p>

<pre>
$ <b>/uri/0install/.../MyProg/Linux-ix86/1.0.2/MyProg</b>
</pre>

<p>
If your program is platform independent then you can skip the platform part,
of course. If your program is platform dependant, but programs referring to
it are not, then you should use the special '@PLATFORM@' target:
</p>

<pre>
$ <b>cd ~/www/MyProg</b>
$ <b>ln -s '@PLATFORM@' platform</b>
</pre>

<p>
Other programs can then access it as:
</p>

<pre>
$ <b>/uri/0install/.../MyProg/platform/1.0.2/MyProg</b>
</pre>

<p>
When accessed via Zero Install, the symlink's target will be the name of
the user's platform (ie, it will appear as 'platform -> Linux-ix86' on
Linux ix86 type systems).
</p>

<p>
The versions should go inside the platform directories (rather than the
other way around) so that 'platform/latest-2.2' can be a different version
for each platform (eg, if the ARM port is a few versions behind the x86 one).
Note that some of the ROX applications use a different scheme (that predates
Zero Install), putting the platforms inside the versions and using 'uname'
to run them. Don't let that confuse you.
</p>

<p>
You should also use symlinks to indicate interesting versions (such as the
current stable release). Thus, a python script might start with:
</p>

<pre>
#!/uri/0install/python.org/platform/2.2-or-later
print "Hello, I need Python 2.2 or later"
</pre>

<p>
The '2.2-or-later' symlink points to the latest version of python which
is compatible with version 2.2. Other examples: 'latest-2.2 -> 2.2.3',
'latest-stable', etc.
</p>

<h3>Avoiding glibc version troubles (and other binary incompatibilities)</h3>

<p>
Glibc tries to prevent programs compiled using one version of the library
from running on other versions, even when the interface is compatible. To
create portable binaries, it is therefore necessary to use a little program at
<a href="http://autopackage.org">autopackage.org</a> (autopackage/apbuild CVS module) which
can be used as a wrapper for gcc.
</p>

<p>
There are a number of other traps to watch out for here. When packaging C
programs for distribution (whether using Zero Install or not), please read
this:
</p>

<ul>
<li><a href="http://autopackage.org/docs/devguide/ch06.html">Chapter 6. Binary portability</a> (in the autopackage packagers' manual)</li>
</ul>

<h3>Depending on other things in Zero Install</h3>

<p>
Your application can use other libraries from Zero Install, or it can use
old-style pathnames (eg, '#!usr/bin/env python'). In that case, the user
must install Python manually, as if they weren't using Zero Install. This
is useful for packages that aren't provided through this system.
</p>

<p>
There's a handy '0run' command, which gets installed to /bin. This takes
a program and a date and runs the program, first forcing a refresh if it's
missing or too old. So a python script might instead start with:
</p>

<pre>
	#!/bin/0run python.org/python2.2 2003-07-05
	print "Hello from python!"
</pre>

<p>
(0run lets you leave out the leading /uri/0install)
</p>

<p>
If the software you're packaging has not been designed for Zero Install then
it may require a 'make install' step. In that case, use --prefix to give
the final location (full URI) and mount a tmpfs partition (or similar) there
to catch the installed files:
</p>

<pre>
$ <b>./configure --prefix=/uri/0install/www.gtk.org/glib/Linux-ix86/2.2.1</b>
$ <b>make</b>
# <b>mount -t tmpfs tmpfs /uri/0install/www.gtk.org/</b>
$ <b>make install</b>
</pre>

<p>
Then use 0build to archive the tmpfs partition onto the web server.
</p>

<h3>Shared libraries</h3>

<p>
It's quite easy to make normal libraries available through Zero Install
(see the <a href="technical.html">glib example</a>). For a very simple example,
take a look in
<tt>/uri/0install/zero-install.sourceforge.net/libs/libhello-1.0</tt>. There's
an 'example' subdirectory with a test program. Copy that directory somewhere
and run make inside it. The program compiles using the header files for
`libhello' from Zero Install. You'll get a binary called 'demo' which, when
run, dynamically links against the binary in Zero Install too.
</p>

<h3>Cool URIs</h3>

<p>
Remember that the full pathname of your application or library is part of the
public API of the software. Changing your directory layout is equivalent to
changing the API. See <a href="http://www.w3.org/Provider/Style/URI.html">
Cool URIs don't change</a> for more thoughts on stable URIs.
</p>

<h2 id="study1">Case study #1: packaging Contacts for Zero Install</h2>

<p><a href="http://roxos.sunsite.dk/dev-contrib/guido/Contacts/">Contacts</a>
is simple address-book application. In this case study, we go though the
process of making it available via Zero Install step-by-step. Contacts is
a very easy program to start with because:
</p>
<ul>
<li>It's written in Python, and so is platform independent.</li>
<li>It doesn't have any hard-coded paths (doesn't expect to be in /usr, etc).</li>
<li>It uses ROX-Lib, which is already in Zero Install.</li>
</ul>

<p>
The packages will be hosted on <tt>roxos.sunsite.dk</tt>, so we'll create
a directory on our local machine to contain everything about this project (any
name can be used). Inside, we'll make a directory for our working copy of the
site (<tt>site</tt>), and a directory for the tar archives that get copied to
the webserver (<tt>export</tt>).
Inside <tt>site</tt> we create the directory structure that the user will see
when they visit our site.
We make an <tt>apps</tt> directory for all the applications on this site
(we might later want <tt>lib</tt> and <tt>docs</tt> directories too, for
example).
</p>

<pre>
$ mkdir roxos.sunsite.dk
$ mkdir roxos.sunsite.dk/site
$ mkdir roxos.sunsite.dk/site/apps
$ mkdir roxos.sunsite.dk/export
</pre>

<p>
We now create an <tt>apps/Contacts</tt> subdirectory for our application,
and extract Contacts into it, renaming it to the correct version:
</p>

<pre>
$ cd roxos.sunsite.dk/site/apps
$ mkdir Contacts
$ cd Contacts
$ tar xjf /path/to/Contacts.tar.bz2
$ mv Contacts Contacts-0.6.1
</pre>

<div class='note' style='text-align: left'>
<p>
Note: the upstream version didn't actually run successfully. I upgraded
findrox.py to the latest version, and changed the import findrox line in AppRun
to this:
</p>
<pre>
import pygtk; pygtk.require('2.0')
import findrox; findrox.version(1, 9, 6)
import rox
</pre>
<p>These issues aren't directly related to packaging for Zero Install, but
were required to run it in any case.</p>
</div>

<p>
Now that we've set up the structure we want users to see, we'll run 0build
to export it to the <tt>export</tt> directory:
</p>

<pre>
$ alias 0build=/uri/0install/zero-install.sourceforge.net/bin/0build
$ cd roxos.sunsite.dk/site
$ 0build ../export roxos.sunsite.dk
</pre>

<p>
This will create some (hidden) files in the export directory. We now need
to upload them to our web-server. We'll create a script to make this easier,
which we'll save as <tt>roxos.sunsite.dk/0push</tt>:
</p>

<pre>
#!/bin/bash
alias 0build=/uri/0install/zero-install.sourceforge.net/bin/0build
cd `dirname "$0"`
(cd site &amp;&amp; 0build) || exit 1
rsync -av --delete --rsh="ssh -l fred" export/.0inst-{archives,index.tgz,index.tar.bz2} roxos.sunsite.dk:/path/to/htdocs/
</pre>

<p>
Of course, you'll have to modify this for your setup. Change <tt>fred</tt> to
your login name on the web-server, <tt>roxos.sunsite.dk</tt> to your site's
name, and <tt>/path/to/htdocs/</tt> to the root directory which your web-server
exports. Then, run <tt>0push</tt> to upload the files and try accessing your
new site:
</p>

<pre>
$ chmod a+x 0push
$ ./0push
$ cd /uri/0install/roxos.sunsite.dk
</pre>

<p>
You should find that you see a copy of your <tt>site</tt> directory here, and
you can run Contacts directly from it.
</p>

<p>
To make changes to your site, edit the <tt>site</tt> directory. We'll start by
making it easier to run the current version. At the moment,
<tt>apps/Contacts</tt> appears as a normal directory containing all the
versions. Users often just want to run the latest version without having to
change all their links on each upgrade. We'll create a <tt>latest</tt> symlink
for this, and make <tt>apps/Contacts</tt> a wrapper application that runs
latest:
</p>

<pre>
$ cd roxos.sunsite.dk/site/apps/Contacts
$ ln -s Contacts-0.6.1 latest
$ ln -s latest/AppRun AppRun
$ ln -s latest/.DirIcon .DirIcon
$ ln -s latest/AppInfo.xml AppInfo.xml
$ ln -s latest/Help Help
</pre>

<p>
Now <tt>Contacts</tt> appears as an application (to ROX-Filer users at least),
which runs the latest version by default. Rerun <tt>0push</tt> to send the
updates to your webserver (you should keep the <tt>export</tt> directory around
so that <tt>0build</tt> can work out which archives actually need to be
updated, rather than recreating everything), and use <tt>0refresh</tt> to
update your cache:
</p>

<pre>
$ cd roxos.sunsite.dk
$ ./0push
$ cd /uri/0install/roxos.sunsite.dk
$ 0refresh
</pre>

</html>
