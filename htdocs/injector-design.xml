<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>The Injector: Design</h2>

<p>
This page describes the design of the injector.
</p>

<p>
A running process is created by combining many different libraries (and other components).
In the Zero Install world, we have all versions of each library available at
all times. The problem then is how to choose which versions to use.
Some examples of ways to choose:
</p>
<ul>
<li>The very latest version.</li>
<li>The latest version in the cache (eg, when off-line).</li>
<li>The latest stable version.</li>
<li>The version recommended by your distribution.</li>
<li>A version not affected by a known security flaw.</li>
<li>The version you've always used in the past.</li>
<li>A development version you are working on yourself.</li>
</ul>
<p>
One way to organise things is to have a component link directly to particular
versions of the components on which it depends. So, running Memo 2.0.0 might
always use pygtk-2.0.0 and Python 2.2.0. But we often want to use the same component
with different versions of its dependencies. For example, when Python 2.2.1
comes out with bug-fixes, we will want Memo to use it automatically. 
</p>

<p>
Zero Install solved this in the past by means of the <b>latest</b> symlinks. Here,
Memo 2.0.0 uses <b>python.org/latest</b>, which is always a symlink to the latest
version. But this isn't flexible enough to cope with the list of cases above.
What if Python 2.2.1 is available, but we'd rather continue with 2.2.0 than
download it? The <b>0divert</b> command allows the root user to redirect these
symlinks, but a major goal of Zero Install is to make software use easy without
involving an administrator. Also, <b>0divert</b> affects all users, whereas we only
wish to affect one user, or maybe even only one program.
</p>

<p>
The injector solves this problem by selecting components to meet a program's requirements,
according to rules specified by the user:
</p>

<p style='text-align: center'>
<img width="569" height="364" src="inject.png"
     alt="The injector selects versions according to the user's policy" />
</p>

<h2>Interfaces and Implementations</h2>

<dl>
<dt>An interface</dt>
<dd>describes what something does (eg, "Simple text editor").</dd>

<dt>An implementation</dt>
<dd>is something that does it (eg, Edit-1.9.6 or Edit-1.9.7).</dd>
</dl>
<p>
In Zero Install, interfaces are named by globally unique URLs (like web pages). Some examples
of interfaces are:
</p>

<ul>
<li><a href="http://rox.sourceforge.net/2005/interfaces/Edit">http://rox.sourceforge.net/2005/interfaces/Edit</a></li>
<li><a href="http://rox.sourceforge.net/2005/interfaces/ROX-Lib">http://rox.sourceforge.net/2005/interfaces/ROX-Lib</a></li>
</ul>

<p>
Each <i>implementation</i> of an interface is identified by a cryptographic digest, eg:
</p>
<ul>
<li><b>sha1=235cb9dd77ef78ef2a79abe98f1fcc404bba4889</b></li>
<li><b>sha1=c86d09f1113041f5eaaa8c3d1416fcf4dad8e2e0</b></li>
</ul>

<p>
When we run a program (like Edit) we need to choose an implementation of every
interface on which it depends. Then, we need to tell the program where to find
them all; this process is known as <i>Dependency Injection</i> (or <i>Inversion
of Control</i>).</p>

<p>
Both tasks are handled by the injector. This takes as input an interface and
chooses an implementation based on the your policy.
</p>

<p>
The list of implementations of an interface is found by using the interface's name as a
URL and downloading the XML file it names (click on one of the interfaces above to see
what an interface file looks like).
</p>
<h2>Versions</h2>

<p>
An implementation (in the Zero Install sense) is always some particular
version. In future, we will identify implementations with a cryptographic hash
of their contents in addition to their version number. Therefore, two releases
with the same version number are still considered as separate implementations
if they differ in any way.
</p>

<p>
A version is a dot-separated list of integers. Eg "1.2.3". It can be just a
single number ("1") or a sequence of any number of components ("1.4.2.3").
Versions are ordered like this:
</p>

<ul>
<li>1</li>
<li>1.1</li>
<li>1.2</li>
<li>1.2.1</li>
<li>1.2.1.4</li>
<li>1.2.2</li>
<li>3</li>
</ul>

<p>
The injector doesn't care about anything other than the sort order (ie, whether
one version comes before or after another). It is assumed that an
implementation can be safely replaced by one with a later version number, but
not with an earlier one. So, if you ask for "1.2.1" then you might get "1.2.2"
or "1.3" or even "5.7", but not "1.2.0". This is a little different to some
other systems, where numbers in different places have different meanings.
</p>

<p>
Incompatible changes (where a newer version cannot be used in place of an older
version) to an interface should be handled by creating a new interface. Eg:
</p>

<ul>
<li>/uri/0install/gtk.org/gtk/gtk-1.2.xml  (contains 1.2.0, 1.2.1, 1.2.2, ...)</li>
<li>/uri/0install/gtk.org/gtk/gtk-2.0.xml  (contains 2.0.0, 2.0.1, 2.2.0, 2.4.0, 2.4.1, ...)</li>
</ul>

<h2>Stability</h2>

<p>
The interface file should also give a stability rating for each implementation. The following
levels are allowed:
</p>

<ul>
<li>Stable</li>
<li>Testing</li>
<li>Developer</li>
<li>Buggy</li>
<li>Insecure</li>
</ul>

<p>
Stability ratings are kept independently of the implementations, and are expected to change over
time. When any new release is made, its stability should be set to <b>Testing</b>. Users who
have selected <b>Help test new versions</b> will then start using it. Other users will continue
with the previous stable release. After a while (days, weeks or months, depending on the project)
with no serious problems found, the implementation's stability can be changed to <b>Stable</b>
so that everyone will use it.
</p>

<p>
If problems are found, it can instead be marked as <b>Buggy</b>, or <b>Insecure</b>. The injector
won't select either by default, but it is useful to users to see the reason (users may opt to
continue using a buggy version if it seems to work for them, but they should never use an insecure
one). <b>Developer</b> is like a more extreme version of <b>Testing</b>, where the program is
expected to have bugs.
</p>

<p>
You can use the <b>Preferred Stability</b> setting in the interface dialog to choose which
versions to use. You can also change the stability rating of any implementation by clicking on it
and choosing a new rating from the popup menu. User-set ratings are shown in capitals.
</p>

<p>
As you make changes to the policy and ratings, the order of the implementations in the list
will change. The version at the top is the one that the injector will actually use. In addition
to the ratings about, you can set the rating to <b>Preferred</b>. Such versions always come first,
unless they're not cached and you are in Off-line mode.
</p>

<p>
Note: If you want to use the second item on the list because the first is
buggy, for example, then it is better to mark the first version as buggy than to mark the
second as preferred. This is because when a new version is available, you will want that to
become the version at the top of the list, whereas a preferred version will always be first.
</p>
 
<h2>Dependencies</h2>

<p>
The interface file also lists the dependencies of each implementation; the
injector locates an implementation of each dependency, recursively. All
information about dependencies is handled at the interface level; this is
because the same implementation may be used in different ways. Also, for
software not specially designed for use with the injector, it allows us to keep
the implementation in its original form.
</p>

<p>
This diagram shows some dependencies for Memo (the dotted lines):
</p>

<p style='text-align: center'>
<img width="554" height="345" src="depend.png"
     alt='Interface files give implementations and dependencies' />
</p>

<p>
The injector will also examine the dependencies of ROX-Lib and Python
recursively.
</p>

<h2>Running the injector on itself</h2>

<p>(this section is just for fun ;-)</p>

<p>
If you look at the <b>0launch-gui</b> script, you will see that
it actually runs the non-interactive version of the injector, <b>0launch-auto</b>, to find an
implementation of <b>injector-gui</b>:
</p>

<pre>
#!/bin/sh
exec /uri/0install/zero-install.sourceforge.net/bin/0launch \
        http://0install.net/2005/interfaces/injector-gui "$@"
</pre>

<p>
Thus, your policy also affects which version of the GUI you get. If you run <b>injector-gui</b>
instead of <b>injector-auto</b> then you can use the GUI to set the policy for itself! Eg:
</p>

<pre>
$ <b>0launch-gui http://0install.net/2005/interfaces/injector-gui \
	http://rox.sourceforge.net/2005/interfaces/Edit</b>
</pre>

<p>
Here, we run <b>0launch-gui</b>, which runs injector-auto to find an
implementation of the GUI. This is run, and displays the policy for itself.
Once you've chosen a version of the GUI, the new version is run, and you can
use that version to choose a version of Edit.
</p>

</html>
